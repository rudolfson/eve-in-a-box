/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.6.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import eve.esi.model.GetCharactersCharacterIdWalletJournalExtraInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * 200 ok object
 */
@ApiModel(description = "200 ok object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-10T20:23:53.613Z")
public class GetCharactersCharacterIdWalletJournal200Ok {
  @SerializedName("amount")
  private Float amount = null;

  @SerializedName("balance")
  private Float balance = null;

  @SerializedName("date")
  private OffsetDateTime date = null;

  @SerializedName("extra_info")
  private GetCharactersCharacterIdWalletJournalExtraInfo extraInfo = null;

  @SerializedName("first_party_id")
  private Integer firstPartyId = null;

  /**
   * first_party_type string
   */
  @JsonAdapter(FirstPartyTypeEnum.Adapter.class)
  public enum FirstPartyTypeEnum {
    CHARACTER("character"),
    
    CORPORATION("corporation"),
    
    ALLIANCE("alliance"),
    
    FACTION("faction");

    private String value;

    FirstPartyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirstPartyTypeEnum fromValue(String text) {
      for (FirstPartyTypeEnum b : FirstPartyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FirstPartyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirstPartyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirstPartyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FirstPartyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("first_party_type")
  private FirstPartyTypeEnum firstPartyType = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("ref_id")
  private Long refId = null;

  /**
   * Transaction type, different type of transaction will populate different fields in &#x60;extra_info&#x60;
   */
  @JsonAdapter(RefTypeEnum.Adapter.class)
  public enum RefTypeEnum {
    PLAYER_TRADING("player_trading"),
    
    MARKET_TRANSACTION("market_transaction"),
    
    GM_CASH_TRANSFER("gm_cash_transfer"),
    
    MISSION_REWARD("mission_reward"),
    
    CLONE_ACTIVATION("clone_activation"),
    
    INHERITANCE("inheritance"),
    
    PLAYER_DONATION("player_donation"),
    
    CORPORATION_PAYMENT("corporation_payment"),
    
    DOCKING_FEE("docking_fee"),
    
    OFFICE_RENTAL_FEE("office_rental_fee"),
    
    FACTORY_SLOT_RENTAL_FEE("factory_slot_rental_fee"),
    
    REPAIR_BILL("repair_bill"),
    
    BOUNTY("bounty"),
    
    BOUNTY_PRIZE("bounty_prize"),
    
    INSURANCE("insurance"),
    
    MISSION_EXPIRATION("mission_expiration"),
    
    MISSION_COMPLETION("mission_completion"),
    
    SHARES("shares"),
    
    COURIER_MISSION_ESCROW("courier_mission_escrow"),
    
    MISSION_COST("mission_cost"),
    
    AGENT_MISCELLANEOUS("agent_miscellaneous"),
    
    LP_STORE("lp_store"),
    
    AGENT_LOCATION_SERVICES("agent_location_services"),
    
    AGENT_DONATION("agent_donation"),
    
    AGENT_SECURITY_SERVICES("agent_security_services"),
    
    AGENT_MISSION_COLLATERAL_PAID("agent_mission_collateral_paid"),
    
    AGENT_MISSION_COLLATERAL_REFUNDED("agent_mission_collateral_refunded"),
    
    AGENTS_PREWARD("agents_preward"),
    
    AGENT_MISSION_REWARD("agent_mission_reward"),
    
    AGENT_MISSION_TIME_BONUS_REWARD("agent_mission_time_bonus_reward"),
    
    CSPA("cspa"),
    
    CSPAOFFLINEREFUND("cspaofflinerefund"),
    
    CORPORATION_ACCOUNT_WITHDRAWAL("corporation_account_withdrawal"),
    
    CORPORATION_DIVIDEND_PAYMENT("corporation_dividend_payment"),
    
    CORPORATION_REGISTRATION_FEE("corporation_registration_fee"),
    
    CORPORATION_LOGO_CHANGE_COST("corporation_logo_change_cost"),
    
    RELEASE_OF_IMPOUNDED_PROPERTY("release_of_impounded_property"),
    
    MARKET_ESCROW("market_escrow"),
    
    AGENT_SERVICES_RENDERED("agent_services_rendered"),
    
    MARKET_FINE_PAID("market_fine_paid"),
    
    CORPORATION_LIQUIDATION("corporation_liquidation"),
    
    BROKERS_FEE("brokers_fee"),
    
    CORPORATION_BULK_PAYMENT("corporation_bulk_payment"),
    
    ALLIANCE_REGISTRATION_FEE("alliance_registration_fee"),
    
    WAR_FEE("war_fee"),
    
    ALLIANCE_MAINTAINANCE_FEE("alliance_maintainance_fee"),
    
    CONTRABAND_FINE("contraband_fine"),
    
    CLONE_TRANSFER("clone_transfer"),
    
    ACCELERATION_GATE_FEE("acceleration_gate_fee"),
    
    TRANSACTION_TAX("transaction_tax"),
    
    JUMP_CLONE_INSTALLATION_FEE("jump_clone_installation_fee"),
    
    MANUFACTURING("manufacturing"),
    
    RESEARCHING_TECHNOLOGY("researching_technology"),
    
    RESEARCHING_TIME_PRODUCTIVITY("researching_time_productivity"),
    
    RESEARCHING_MATERIAL_PRODUCTIVITY("researching_material_productivity"),
    
    COPYING("copying"),
    
    REVERSE_ENGINEERING("reverse_engineering"),
    
    CONTRACT_AUCTION_BID("contract_auction_bid"),
    
    CONTRACT_AUCTION_BID_REFUND("contract_auction_bid_refund"),
    
    CONTRACT_COLLATERAL("contract_collateral"),
    
    CONTRACT_REWARD_REFUND("contract_reward_refund"),
    
    CONTRACT_AUCTION_SOLD("contract_auction_sold"),
    
    CONTRACT_REWARD("contract_reward"),
    
    CONTRACT_COLLATERAL_REFUND("contract_collateral_refund"),
    
    CONTRACT_COLLATERAL_PAYOUT("contract_collateral_payout"),
    
    CONTRACT_PRICE("contract_price"),
    
    CONTRACT_BROKERS_FEE("contract_brokers_fee"),
    
    CONTRACT_SALES_TAX("contract_sales_tax"),
    
    CONTRACT_DEPOSIT("contract_deposit"),
    
    CONTRACT_DEPOSIT_SALES_TAX("contract_deposit_sales_tax"),
    
    CONTRACT_AUCTION_BID_CORP("contract_auction_bid_corp"),
    
    CONTRACT_COLLATERAL_DEPOSITED_CORP("contract_collateral_deposited_corp"),
    
    CONTRACT_PRICE_PAYMENT_CORP("contract_price_payment_corp"),
    
    CONTRACT_BROKERS_FEE_CORP("contract_brokers_fee_corp"),
    
    CONTRACT_DEPOSIT_CORP("contract_deposit_corp"),
    
    CONTRACT_DEPOSIT_REFUND("contract_deposit_refund"),
    
    CONTRACT_REWARD_DEPOSITED("contract_reward_deposited"),
    
    CONTRACT_REWARD_DEPOSITED_CORP("contract_reward_deposited_corp"),
    
    BOUNTY_PRIZES("bounty_prizes"),
    
    ADVERTISEMENT_LISTING_FEE("advertisement_listing_fee"),
    
    MEDAL_CREATION("medal_creation"),
    
    MEDAL_ISSUED("medal_issued"),
    
    DNA_MODIFICATION_FEE("dna_modification_fee"),
    
    SOVEREIGNITY_BILL("sovereignity_bill"),
    
    BOUNTY_PRIZE_CORPORATION_TAX("bounty_prize_corporation_tax"),
    
    AGENT_MISSION_REWARD_CORPORATION_TAX("agent_mission_reward_corporation_tax"),
    
    AGENT_MISSION_TIME_BONUS_REWARD_CORPORATION_TAX("agent_mission_time_bonus_reward_corporation_tax"),
    
    UPKEEP_ADJUSTMENT_FEE("upkeep_adjustment_fee"),
    
    PLANETARY_IMPORT_TAX("planetary_import_tax"),
    
    PLANETARY_EXPORT_TAX("planetary_export_tax"),
    
    PLANETARY_CONSTRUCTION("planetary_construction"),
    
    CORPORATE_REWARD_PAYOUT("corporate_reward_payout"),
    
    BOUNTY_SURCHARGE("bounty_surcharge"),
    
    CONTRACT_REVERSAL("contract_reversal"),
    
    CORPORATE_REWARD_TAX("corporate_reward_tax"),
    
    STORE_PURCHASE("store_purchase"),
    
    STORE_PURCHASE_REFUND("store_purchase_refund"),
    
    DATACORE_FEE("datacore_fee"),
    
    WAR_FEE_SURRENDER("war_fee_surrender"),
    
    WAR_ALLY_CONTRACT("war_ally_contract"),
    
    BOUNTY_REIMBURSEMENT("bounty_reimbursement"),
    
    KILL_RIGHT_FEE("kill_right_fee"),
    
    SECURITY_PROCESSING_FEE("security_processing_fee"),
    
    INDUSTRY_JOB_TAX("industry_job_tax"),
    
    INFRASTRUCTURE_HUB_MAINTENANCE("infrastructure_hub_maintenance"),
    
    ASSET_SAFETY_RECOVERY_TAX("asset_safety_recovery_tax"),
    
    OPPORTUNITY_REWARD("opportunity_reward"),
    
    PROJECT_DISCOVERY_REWARD("project_discovery_reward"),
    
    PROJECT_DISCOVERY_TAX("project_discovery_tax"),
    
    REPROCESSING_TAX("reprocessing_tax"),
    
    JUMP_CLONE_ACTIVATION_FEE("jump_clone_activation_fee"),
    
    OPERATION_BONUS("operation_bonus");

    private String value;

    RefTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefTypeEnum fromValue(String text) {
      for (RefTypeEnum b : RefTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RefTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RefTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ref_type")
  private RefTypeEnum refType = null;

  @SerializedName("second_party_id")
  private Integer secondPartyId = null;

  /**
   * second_party_type string
   */
  @JsonAdapter(SecondPartyTypeEnum.Adapter.class)
  public enum SecondPartyTypeEnum {
    CHARACTER("character"),
    
    CORPORATION("corporation"),
    
    ALLIANCE("alliance"),
    
    FACTION("faction");

    private String value;

    SecondPartyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecondPartyTypeEnum fromValue(String text) {
      for (SecondPartyTypeEnum b : SecondPartyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SecondPartyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecondPartyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecondPartyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SecondPartyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("second_party_type")
  private SecondPartyTypeEnum secondPartyType = null;

  @SerializedName("tax")
  private Float tax = null;

  @SerializedName("tax_reciever_id")
  private Integer taxRecieverId = null;

  public GetCharactersCharacterIdWalletJournal200Ok amount(Float amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Transaction amount. Positive when value transferred to the first party. Negative otherwise
   * @return amount
  **/
  @ApiModelProperty(value = "Transaction amount. Positive when value transferred to the first party. Negative otherwise")
  public Float getAmount() {
    return amount;
  }

  public void setAmount(Float amount) {
    this.amount = amount;
  }

  public GetCharactersCharacterIdWalletJournal200Ok balance(Float balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Wallet balance after transaction occurred
   * @return balance
  **/
  @ApiModelProperty(value = "Wallet balance after transaction occurred")
  public Float getBalance() {
    return balance;
  }

  public void setBalance(Float balance) {
    this.balance = balance;
  }

  public GetCharactersCharacterIdWalletJournal200Ok date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Date and time of transaction
   * @return date
  **/
  @ApiModelProperty(required = true, value = "Date and time of transaction")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public GetCharactersCharacterIdWalletJournal200Ok extraInfo(GetCharactersCharacterIdWalletJournalExtraInfo extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Get extraInfo
   * @return extraInfo
  **/
  @ApiModelProperty(value = "")
  public GetCharactersCharacterIdWalletJournalExtraInfo getExtraInfo() {
    return extraInfo;
  }

  public void setExtraInfo(GetCharactersCharacterIdWalletJournalExtraInfo extraInfo) {
    this.extraInfo = extraInfo;
  }

  public GetCharactersCharacterIdWalletJournal200Ok firstPartyId(Integer firstPartyId) {
    this.firstPartyId = firstPartyId;
    return this;
  }

   /**
   * first_party_id integer
   * @return firstPartyId
  **/
  @ApiModelProperty(value = "first_party_id integer")
  public Integer getFirstPartyId() {
    return firstPartyId;
  }

  public void setFirstPartyId(Integer firstPartyId) {
    this.firstPartyId = firstPartyId;
  }

  public GetCharactersCharacterIdWalletJournal200Ok firstPartyType(FirstPartyTypeEnum firstPartyType) {
    this.firstPartyType = firstPartyType;
    return this;
  }

   /**
   * first_party_type string
   * @return firstPartyType
  **/
  @ApiModelProperty(value = "first_party_type string")
  public FirstPartyTypeEnum getFirstPartyType() {
    return firstPartyType;
  }

  public void setFirstPartyType(FirstPartyTypeEnum firstPartyType) {
    this.firstPartyType = firstPartyType;
  }

  public GetCharactersCharacterIdWalletJournal200Ok reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * reason string
   * @return reason
  **/
  @ApiModelProperty(value = "reason string")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public GetCharactersCharacterIdWalletJournal200Ok refId(Long refId) {
    this.refId = refId;
    return this;
  }

   /**
   * Unique journal reference ID
   * @return refId
  **/
  @ApiModelProperty(required = true, value = "Unique journal reference ID")
  public Long getRefId() {
    return refId;
  }

  public void setRefId(Long refId) {
    this.refId = refId;
  }

  public GetCharactersCharacterIdWalletJournal200Ok refType(RefTypeEnum refType) {
    this.refType = refType;
    return this;
  }

   /**
   * Transaction type, different type of transaction will populate different fields in &#x60;extra_info&#x60;
   * @return refType
  **/
  @ApiModelProperty(required = true, value = "Transaction type, different type of transaction will populate different fields in `extra_info`")
  public RefTypeEnum getRefType() {
    return refType;
  }

  public void setRefType(RefTypeEnum refType) {
    this.refType = refType;
  }

  public GetCharactersCharacterIdWalletJournal200Ok secondPartyId(Integer secondPartyId) {
    this.secondPartyId = secondPartyId;
    return this;
  }

   /**
   * second_party_id integer
   * @return secondPartyId
  **/
  @ApiModelProperty(value = "second_party_id integer")
  public Integer getSecondPartyId() {
    return secondPartyId;
  }

  public void setSecondPartyId(Integer secondPartyId) {
    this.secondPartyId = secondPartyId;
  }

  public GetCharactersCharacterIdWalletJournal200Ok secondPartyType(SecondPartyTypeEnum secondPartyType) {
    this.secondPartyType = secondPartyType;
    return this;
  }

   /**
   * second_party_type string
   * @return secondPartyType
  **/
  @ApiModelProperty(value = "second_party_type string")
  public SecondPartyTypeEnum getSecondPartyType() {
    return secondPartyType;
  }

  public void setSecondPartyType(SecondPartyTypeEnum secondPartyType) {
    this.secondPartyType = secondPartyType;
  }

  public GetCharactersCharacterIdWalletJournal200Ok tax(Float tax) {
    this.tax = tax;
    return this;
  }

   /**
   * Tax amount received for tax related transactions
   * @return tax
  **/
  @ApiModelProperty(value = "Tax amount received for tax related transactions")
  public Float getTax() {
    return tax;
  }

  public void setTax(Float tax) {
    this.tax = tax;
  }

  public GetCharactersCharacterIdWalletJournal200Ok taxRecieverId(Integer taxRecieverId) {
    this.taxRecieverId = taxRecieverId;
    return this;
  }

   /**
   * the corporation ID receiving any tax paid
   * @return taxRecieverId
  **/
  @ApiModelProperty(value = "the corporation ID receiving any tax paid")
  public Integer getTaxRecieverId() {
    return taxRecieverId;
  }

  public void setTaxRecieverId(Integer taxRecieverId) {
    this.taxRecieverId = taxRecieverId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCharactersCharacterIdWalletJournal200Ok getCharactersCharacterIdWalletJournal200Ok = (GetCharactersCharacterIdWalletJournal200Ok) o;
    return Objects.equals(this.amount, getCharactersCharacterIdWalletJournal200Ok.amount) &&
        Objects.equals(this.balance, getCharactersCharacterIdWalletJournal200Ok.balance) &&
        Objects.equals(this.date, getCharactersCharacterIdWalletJournal200Ok.date) &&
        Objects.equals(this.extraInfo, getCharactersCharacterIdWalletJournal200Ok.extraInfo) &&
        Objects.equals(this.firstPartyId, getCharactersCharacterIdWalletJournal200Ok.firstPartyId) &&
        Objects.equals(this.firstPartyType, getCharactersCharacterIdWalletJournal200Ok.firstPartyType) &&
        Objects.equals(this.reason, getCharactersCharacterIdWalletJournal200Ok.reason) &&
        Objects.equals(this.refId, getCharactersCharacterIdWalletJournal200Ok.refId) &&
        Objects.equals(this.refType, getCharactersCharacterIdWalletJournal200Ok.refType) &&
        Objects.equals(this.secondPartyId, getCharactersCharacterIdWalletJournal200Ok.secondPartyId) &&
        Objects.equals(this.secondPartyType, getCharactersCharacterIdWalletJournal200Ok.secondPartyType) &&
        Objects.equals(this.tax, getCharactersCharacterIdWalletJournal200Ok.tax) &&
        Objects.equals(this.taxRecieverId, getCharactersCharacterIdWalletJournal200Ok.taxRecieverId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, balance, date, extraInfo, firstPartyId, firstPartyType, reason, refId, refType, secondPartyId, secondPartyType, tax, taxRecieverId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCharactersCharacterIdWalletJournal200Ok {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    firstPartyId: ").append(toIndentedString(firstPartyId)).append("\n");
    sb.append("    firstPartyType: ").append(toIndentedString(firstPartyType)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    refType: ").append(toIndentedString(refType)).append("\n");
    sb.append("    secondPartyId: ").append(toIndentedString(secondPartyId)).append("\n");
    sb.append("    secondPartyType: ").append(toIndentedString(secondPartyType)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxRecieverId: ").append(toIndentedString(taxRecieverId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

