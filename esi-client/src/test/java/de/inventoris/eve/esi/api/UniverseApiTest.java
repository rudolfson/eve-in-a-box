/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.inventoris.eve.esi.api;

import de.inventoris.eve.esi.invoke.ApiException;
import de.inventoris.eve.esi.model.Forbidden;
import de.inventoris.eve.esi.model.GetUniverseBloodlines200Ok;
import de.inventoris.eve.esi.model.GetUniverseCategoriesCategoryIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseCategoriesCategoryIdOk;
import de.inventoris.eve.esi.model.GetUniverseConstellationsConstellationIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseConstellationsConstellationIdOk;
import de.inventoris.eve.esi.model.GetUniverseFactions200Ok;
import de.inventoris.eve.esi.model.GetUniverseGraphicsGraphicIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseGraphicsGraphicIdOk;
import de.inventoris.eve.esi.model.GetUniverseGroupsGroupIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseGroupsGroupIdOk;
import de.inventoris.eve.esi.model.GetUniverseMoonsMoonIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseMoonsMoonIdOk;
import de.inventoris.eve.esi.model.GetUniversePlanetsPlanetIdNotFound;
import de.inventoris.eve.esi.model.GetUniversePlanetsPlanetIdOk;
import de.inventoris.eve.esi.model.GetUniverseRaces200Ok;
import de.inventoris.eve.esi.model.GetUniverseRegionsRegionIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseRegionsRegionIdOk;
import de.inventoris.eve.esi.model.GetUniverseStargatesStargateIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseStargatesStargateIdOk;
import de.inventoris.eve.esi.model.GetUniverseStarsStarIdOk;
import de.inventoris.eve.esi.model.GetUniverseStationsStationIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseStationsStationIdOk;
import de.inventoris.eve.esi.model.GetUniverseStructuresStructureIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseStructuresStructureIdOk;
import de.inventoris.eve.esi.model.GetUniverseSystemJumps200Ok;
import de.inventoris.eve.esi.model.GetUniverseSystemKills200Ok;
import de.inventoris.eve.esi.model.GetUniverseSystemsSystemIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseSystemsSystemIdOk;
import de.inventoris.eve.esi.model.GetUniverseTypesTypeIdNotFound;
import de.inventoris.eve.esi.model.GetUniverseTypesTypeIdOk;
import de.inventoris.eve.esi.model.InternalServerError;
import de.inventoris.eve.esi.model.PostUniverseNames200Ok;
import de.inventoris.eve.esi.model.PostUniverseNamesNotFound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniverseApi
 */
@Ignore
public class UniverseApiTest {

    private final UniverseApi api = new UniverseApi();

    
    /**
     * Get bloodlines
     *
     * Get a list of bloodlines  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseBloodlinesTest() throws ApiException {
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        List<GetUniverseBloodlines200Ok> response = api.getUniverseBloodlines(datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get item categories
     *
     * Get a list of item categories  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseCategoriesTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseCategories(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get item category information
     *
     * Get information of an item category  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseCategoriesCategoryIdTest() throws ApiException {
        Integer categoryId = null;
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseCategoriesCategoryIdOk response = api.getUniverseCategoriesCategoryId(categoryId, datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get constellations
     *
     * Get a list of constellations  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseConstellationsTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseConstellations(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get constellation information
     *
     * Get information on a constellation  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseConstellationsConstellationIdTest() throws ApiException {
        Integer constellationId = null;
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseConstellationsConstellationIdOk response = api.getUniverseConstellationsConstellationId(constellationId, datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get factions
     *
     * Get a list of factions  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseFactionsTest() throws ApiException {
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        List<GetUniverseFactions200Ok> response = api.getUniverseFactions(datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get graphics
     *
     * Get a list of graphics  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseGraphicsTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseGraphics(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get graphic information
     *
     * Get information on a graphic  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseGraphicsGraphicIdTest() throws ApiException {
        Integer graphicId = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseGraphicsGraphicIdOk response = api.getUniverseGraphicsGraphicId(graphicId, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get item groups
     *
     * Get a list of item groups  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseGroupsTest() throws ApiException {
        String datasource = null;
        Integer page = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseGroups(datasource, page, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get item group information
     *
     * Get information on an item group  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseGroupsGroupIdTest() throws ApiException {
        Integer groupId = null;
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseGroupsGroupIdOk response = api.getUniverseGroupsGroupId(groupId, datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get moon information
     *
     * Get information on a moon  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseMoonsMoonIdTest() throws ApiException {
        Integer moonId = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseMoonsMoonIdOk response = api.getUniverseMoonsMoonId(moonId, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get planet information
     *
     * Get information on a planet  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniversePlanetsPlanetIdTest() throws ApiException {
        Integer planetId = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniversePlanetsPlanetIdOk response = api.getUniversePlanetsPlanetId(planetId, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get character races
     *
     * Get a list of character races  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseRacesTest() throws ApiException {
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        List<GetUniverseRaces200Ok> response = api.getUniverseRaces(datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get regions
     *
     * Get a list of regions  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseRegionsTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseRegions(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get region information
     *
     * Get information on a region  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseRegionsRegionIdTest() throws ApiException {
        Integer regionId = null;
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseRegionsRegionIdOk response = api.getUniverseRegionsRegionId(regionId, datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get stargate information
     *
     * Get information on a stargate  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseStargatesStargateIdTest() throws ApiException {
        Integer stargateId = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseStargatesStargateIdOk response = api.getUniverseStargatesStargateId(stargateId, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get star information
     *
     * Get information on a star  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseStarsStarIdTest() throws ApiException {
        Integer starId = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseStarsStarIdOk response = api.getUniverseStarsStarId(starId, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get station information
     *
     * Get information on a station  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseStationsStationIdTest() throws ApiException {
        Integer stationId = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseStationsStationIdOk response = api.getUniverseStationsStationId(stationId, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * List all public structures
     *
     * List all public structures  ---  This route is cached for up to 3600 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseStructuresTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Long> response = api.getUniverseStructures(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get structure information
     *
     * Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  ---  This route is cached for up to 3600 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseStructuresStructureIdTest() throws ApiException {
        Long structureId = null;
        String datasource = null;
        String token = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseStructuresStructureIdOk response = api.getUniverseStructuresStructureId(structureId, datasource, token, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get system jumps
     *
     * Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  ---  This route is cached for up to 3600 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseSystemJumpsTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<GetUniverseSystemJumps200Ok> response = api.getUniverseSystemJumps(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get system kills
     *
     * Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  ---  This route is cached for up to 3600 seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseSystemKillsTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<GetUniverseSystemKills200Ok> response = api.getUniverseSystemKills(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get solar systems
     *
     * Get a list of solar systems  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseSystemsTest() throws ApiException {
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseSystems(datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get solar system information
     *
     * Get information on a solar system  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseSystemsSystemIdTest() throws ApiException {
        Integer systemId = null;
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseSystemsSystemIdOk response = api.getUniverseSystemsSystemId(systemId, datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get types
     *
     * Get a list of type ids  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseTypesTest() throws ApiException {
        String datasource = null;
        Integer page = null;
        String userAgent = null;
        String xUserAgent = null;
        List<Integer> response = api.getUniverseTypes(datasource, page, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get type information
     *
     * Get information on a type  ---  This route expires daily at 11:05
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUniverseTypesTypeIdTest() throws ApiException {
        Integer typeId = null;
        String datasource = null;
        String language = null;
        String userAgent = null;
        String xUserAgent = null;
        GetUniverseTypesTypeIdOk response = api.getUniverseTypesTypeId(typeId, datasource, language, userAgent, xUserAgent);

        // TODO: test validations
    }
    
    /**
     * Get names and categories for a set of ID&#39;s
     *
     * Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  --- 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUniverseNamesTest() throws ApiException {
        List<Integer> ids = null;
        String datasource = null;
        String userAgent = null;
        String xUserAgent = null;
        List<PostUniverseNames200Ok> response = api.postUniverseNames(ids, datasource, userAgent, xUserAgent);

        // TODO: test validations
    }
    
}
