/*
 * EVEMarketer Marketstat API
 * EVEMarketer Marketstat API is almost compatible with EVE-Central's Marketstat API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketer.api;

import marketer.invoke.ApiCallback;
import marketer.invoke.ApiClient;
import marketer.invoke.ApiException;
import marketer.invoke.ApiResponse;
import marketer.invoke.Configuration;
import marketer.invoke.Pair;
import marketer.invoke.ProgressRequestBody;
import marketer.invoke.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import marketer.model.ExecAPI;
import marketer.model.Type;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketstatApi {
    private ApiClient apiClient;

    public MarketstatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketstatApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for marketstatGet
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call marketstatGetCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/marketstat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (typeid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "typeid", typeid));
        if (regionlimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regionlimit", regionlimit));
        if (usesystem != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usesystem", usesystem));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call marketstatGetValidateBeforeCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'typeid' is set
        if (typeid == null) {
            throw new ApiException("Missing the required parameter 'typeid' when calling marketstatGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = marketstatGetCall(typeid, regionlimit, usesystem, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * XML Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @return ExecAPI
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExecAPI marketstatGet(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        ApiResponse<ExecAPI> resp = marketstatGetWithHttpInfo(typeid, regionlimit, usesystem);
        return resp.getData();
    }

    /**
     * XML Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @return ApiResponse&lt;ExecAPI&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExecAPI> marketstatGetWithHttpInfo(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        com.squareup.okhttp.Call call = marketstatGetValidateBeforeCall(typeid, regionlimit, usesystem, null, null);
        Type localVarReturnType = new TypeToken<ExecAPI>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * XML Marketstat (asynchronously)
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single solar system. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call marketstatGetAsync(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback<ExecAPI> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = marketstatGetValidateBeforeCall(typeid, regionlimit, usesystem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExecAPI>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for marketstatJsonGet
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call marketstatJsonGetCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/marketstat/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (typeid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "typeid", typeid));
        if (regionlimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regionlimit", regionlimit));
        if (usesystem != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usesystem", usesystem));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call marketstatJsonGetValidateBeforeCall(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'typeid' is set
        if (typeid == null) {
            throw new ApiException("Missing the required parameter 'typeid' when calling marketstatJsonGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = marketstatJsonGetCall(typeid, regionlimit, usesystem, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * JSON Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @return List&lt;Type&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Type> marketstatJsonGet(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        ApiResponse<List<Type>> resp = marketstatJsonGetWithHttpInfo(typeid, regionlimit, usesystem);
        return resp.getData();
    }

    /**
     * JSON Marketstat
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @return ApiResponse&lt;List&lt;Type&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Type>> marketstatJsonGetWithHttpInfo(List<Integer> typeid, Integer regionlimit, Integer usesystem) throws ApiException {
        com.squareup.okhttp.Call call = marketstatJsonGetValidateBeforeCall(typeid, regionlimit, usesystem, null, null);
        Type localVarReturnType = new TypeToken<List<Type>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * JSON Marketstat (asynchronously)
     * 
     * @param typeid TypeID. Multiple TypeIDs can be specified in the following format (max 200): typeid&#x3D;34&amp;typeid&#x3D;35 or typeid&#x3D;34,35  (required)
     * @param regionlimit Limit the statistics to a single region. (optional)
     * @param usesystem Limit the statistics to a single region. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call marketstatJsonGetAsync(List<Integer> typeid, Integer regionlimit, Integer usesystem, final ApiCallback<List<Type>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = marketstatJsonGetValidateBeforeCall(typeid, regionlimit, usesystem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Type>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
